import React, { createContext, useState, useContext, useEffect } from 'react';
import { toast } from "../components/ui/sonner";

const EventContext = createContext(undefined);

const mockEvents = [
  {
    id: "1",
    title: "Concierto de Jazz en el Parque",
    description: "Disfruta de una tarde de jazz al aire libre con los mejores músicos locales.",
    location: {
      address: "Parque Central",
      city: "Madrid",
      country: "España",
      lat: 40.416775,
      lng: -3.703790
    },
    date: "2025-06-15",
    time: "17:00",
    organizer: {
      id: "1",
      name: "John Doe",
      email: "john@example.com",
      createdAt: "2023-01-15T14:30:00Z",
      rating: 4.8
    },
    attendees: [],
    maxAttendees: 100,
    category: "Música",
    images: ["https://images.unsplash.com/photo-1498936178812-4b2e558d2937"],
    rating: 4.5
  },
  {
    id: "2",
    title: "Taller de Cocina Italiana",
    description: "Aprende a preparar pasta casera y las mejores salsas italianas con un chef profesional.",
    location: {
      address: "Escuela de Cocina La Dolce Vita",
      city: "Barcelona",
      country: "España",
      lat: 41.385064,
      lng: 2.173404
    },
    date: "2025-05-20",
    time: "19:00",
    organizer: {
      id: "2",
      name: "Jane Smith",
      email: "jane@example.com",
      createdAt: "2023-02-10T10:15:00Z",
      rating: 4.5
    },
    attendees: [],
    maxAttendees: 15,
    category: "Gastronomía",
    images: ["https://images.unsplash.com/photo-1498050108023-c5249f4df085"],
    rating: 4.7
  },
  {
    id: "3",
    title: "Maratón Solidario",
    description: "Participa en esta carrera benéfica para recaudar fondos para hospitales infantiles.",
    location: {
      address: "Avenida Principal",
      city: "Valencia",
      country: "España",
      lat: 39.469906,
      lng: -0.376288
    },
    date: "2025-07-10",
    time: "08:00",
    organizer: {
      id: "1",
      name: "John Doe",
      email: "john@example.com",
      createdAt: "2023-01-15T14:30:00Z",
      rating: 4.8
    },
    attendees: [],
    maxAttendees: 500,
    category: "Deportes",
    images: ["https://images.unsplash.com/photo-1460925895917-afdab827c52f"],
    rating: 4.4
  },
  {
    id: "4",
    title: "Exposición de Arte Contemporáneo",
    description: "Descubre las obras más innovadoras de artistas emergentes en esta exposición única.",
    location: {
      address: "Galería Moderna",
      city: "Sevilla",
      country: "España",
      lat: 37.389092,
      lng: -5.984459
    },
    date: "2025-06-05",
    time: "11:00",
    organizer: {
      id: "2",
      name: "Jane Smith",
      email: "jane@example.com",
      createdAt: "2023-02-10T10:15:00Z",
      rating: 4.5
    },
    attendees: [],
    maxAttendees: 200,
    category: "Arte",
    images: ["https://images.unsplash.com/photo-1498036178812-4b2e558d2937"],
    rating: 4.9
  }
];

export const EventProvider = ({ children }) => {
  const [events, setEvents] = useState(mockEvents);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate API call
    setTimeout(() => {
      setIsLoading(false);
    }, 1000);
  }, []);

  const featuredEvents = events.sort((a, b) => (b.rating || 0) - (a.rating || 0)).slice(0, 3);

  const getEventById = (id) => {
    return events.find(event => event.id === id);
  };

  const createEvent = async (eventData) => {
    setIsLoading(true);
    try {
      // In a real app, this would be an API call
      const newEvent = {
        ...eventData,
        id: String(events.length + 1),
        attendees: [],
        comments: [],
        rating: 0,
      };

      setEvents([...events, newEvent]);
      toast.success("¡Evento creado exitosamente!");
      return newEvent;
    } catch (error) {
      toast.error("Error al crear el evento.");
      console.error('Event creation error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const updateEvent = async (id, eventData) => {
    setIsLoading(true);
    try {
      // In a real app, this would be an API call
      const updatedEvents = events.map(event => {
        if (event.id === id) {
          return { ...event, ...eventData };
        }
        return event;
      });

      setEvents(updatedEvents);
      const updatedEvent = updatedEvents.find(event => event.id === id);
      
      if (!updatedEvent) {
        throw new Error('Event not found');
      }
      
      toast.success("¡Evento actualizado exitosamente!");
      return updatedEvent;
    } catch (error) {
      toast.error("Error al actualizar el evento.");
      console.error('Event update error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const deleteEvent = async (id) => {
    setIsLoading(true);
    try {
      // In a real app, this would be an API call
      setEvents(events.filter(event => event.id !== id));
      toast.success("Evento eliminado exitosamente.");
    } catch (error) {
      toast.error("Error al eliminar el evento.");
      console.error('Event deletion error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const addComment = async (eventId, commentData) => {
    setIsLoading(true);
    try {
      // In a real app, this would be an API call
      const newComment = {
        ...commentData,
        id: `comment-${Date.now()}`,
        createdAt: new Date().toISOString(),
      };

      const updatedEvents = events.map(event => {
        if (event.id === eventId) {
          const comments = event.comments || [];
          const updatedEvent = {
            ...event,
            comments: [...comments, newComment],
          };
          
          // Recalculate average rating
          if (comments.length > 0) {
            const totalRating = comments.reduce((sum, comment) => sum + comment.rating, 0) + newComment.rating;
            updatedEvent.rating = totalRating / (comments.length + 1);
          } else {
            updatedEvent.rating = newComment.rating;
          }
          
          return updatedEvent;
        }
        return event;
      });

      setEvents(updatedEvents);
      toast.success("Comentario añadido exitosamente.");
      return newComment;
    } catch (error) {
      toast.error("Error al añadir el comentario.");
      console.error('Comment addition error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const joinEvent = async (eventId, userId) => {
    setIsLoading(true);
    try {
      const updatedEvents = events.map(event => {
        if (event.id === eventId) {
          // Find the user by ID (in a real app, you'd fetch this from the DB)
          const user = { id: userId, name: "Current User", email: "user@example.com", createdAt: new Date().toISOString() };
          
          // Check if user is already in attendees
          if (event.attendees.find(a => a.id === userId)) {
            throw new Error('User is already attending this event');
          }
          
          // Check if event is full
          if (event.maxAttendees && event.attendees.length >= event.maxAttendees) {
            throw new Error('Event is already at full capacity');
          }
          
          return {
            ...event,
            attendees: [...event.attendees, user]
          };
        }
        return event;
      });

      setEvents(updatedEvents);
      toast.success("Te has unido al evento exitosamente.");
    } catch (error) {
      toast.error(error.message || "Error al unirse al evento.");
      console.error('Event join error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const leaveEvent = async (eventId, userId) => {
    setIsLoading(true);
    try {
      // In a real app, this would be an API call
      const updatedEvents = events.map(event => {
        if (event.id === eventId) {
          return {
            ...event,
            attendees: event.attendees.filter(a => a.id !== userId)
          };
        }
        return event;
      });

      setEvents(updatedEvents);
      toast.success("Has abandonado el evento exitosamente.");
    } catch (error) {
      toast.error("Error al abandonar el evento.");
      console.error('Event leave error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <EventContext.Provider
      value={{
        events,
        isLoading,
        featuredEvents,
        getEventById,
        createEvent,
        updateEvent,
        deleteEvent,
        addComment,
        joinEvent,
        leaveEvent
      }}
    >
      {children}
    </EventContext.Provider>
  );
};

export const useEvents = () => {
  const context = useContext(EventContext);
  if (context === undefined) {
    throw new Error('useEvents must be used within an EventProvider');
  }
  return context;
};